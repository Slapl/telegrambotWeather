import os
import telebot
import requests
import threading
from flask import Flask

BOT_TOKEN = os.environ.get('BOT_TOKEN')
WEATHER_API_KEY = os.environ.get('WEATHER_API_KEY')

bot = telebot.TeleBot(BOT_TOKEN)
app = Flask(__name__)

print("=== BOT STARTING ===")
print(f"BOT_TOKEN: {'*' * 10}{BOT_TOKEN[-5:] if BOT_TOKEN else 'NOT SET'}")
print(f"WEATHER_API_KEY: {'*' * 10}{WEATHER_API_KEY[-5:] if WEATHER_API_KEY else 'NOT SET'}")

@bot.message_handler(commands=['start'])
def send_welcome(message):
    print(f"üì® Received /start from {message.chat.id}")
    bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø–æ–≥–æ–¥—ã. –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, —á—Ç–æ–±—ã —è –º–æ–≥ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ –æ –ø–æ–≥–æ–¥–µ.")

@bot.message_handler(func=lambda message: True)
def send_weather(message):
    try:
        print(f"üì® Received: '{message.text}' from {message.chat.id}")
        city = message.text.strip()
        
        if not city:
            bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.")
            return
            
        url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={WEATHER_API_KEY}&units=metric&lang=ru"
        print(f"üåê Fetching weather for: {city}")
        
        response = requests.get(url, timeout=10)
        data = response.json()
        
        print(f"üå§Ô∏è API Response: {data.get('cod')}")
        
        if data.get('cod') == 200:
            weather_info = f"""
üåç –ì–æ—Ä–æ–¥: {data['name']}
üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {data['main']['temp']}¬∞C
üí® –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {data['main']['feels_like']}¬∞C
üìù –û–ø–∏—Å–∞–Ω–∏–µ: {data['weather'][0]['description']}
üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {data['main']['humidity']}%
üå¨Ô∏è –í–µ—Ç–µ—Ä: {data['wind']['speed']} –º/—Å
"""
            bot.reply_to(message, weather_info)
            print("‚úÖ Weather sent successfully")
        else:
            error_msg = data.get('message', 'Unknown error')
            print(f"‚ùå API Error: {error_msg}")
            bot.reply_to(message, f"‚ùå –ì–æ—Ä–æ–¥ '{city}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
            
    except requests.exceptions.Timeout:
        print("‚ùå API Timeout")
        bot.reply_to(message, "‚è∞ –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        print(f"‚ùå Error: {e}")
        bot.reply_to(message, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@app.route('/')
def index():
    return "ü§ñ Bot is running! Use Telegram to interact with the bot."

def start_bot_polling():
    print("üîÑ Starting bot polling...")
    try:
        bot.remove_webhook()
        print("‚úÖ Webhook removed")
        bot.infinity_polling(timeout=60, long_polling_timeout=60)
    except Exception as e:
        print(f"‚ùå Polling error: {e}")

if __name__ == "__main__":
    print("üöÄ Starting application...")
    
    bot_thread = threading.Thread(target=start_bot_polling)
    bot_thread.daemon = True
    bot_thread.start()
    
    port = int(os.environ.get("PORT", 5000))
    print(f"üåê Starting Flask on port {port}")
    app.run(host="0.0.0.0", port=port, debug=False)


