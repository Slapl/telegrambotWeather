import telebot
import requests
import os
import logging
from background import keep_alive

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

TELEGRAM_BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN', '')
OPENWEATHERMAP_API_KEY = os.environ.get('OPENWEATHERMAP_API_KEY', '')

if not TELEGRAM_BOT_TOKEN or not OPENWEATHERMAP_API_KEY:
    raise ValueError('‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å TELEGRAM_BOT_TOKEN –∏ OPENWEATHERMAP_API_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è')

bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)

start_txt = '–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã. \n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏ –æ–Ω —Å–∫–∞–∂–µ—Ç, –∫–∞–∫–∞—è —Ç–∞–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∏ –∫–∞–∫ –æ–Ω–∞ –æ—â—É—â–∞–µ—Ç—Å—è.'


@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.from_user.id, start_txt, parse_mode='Markdown')


@bot.message_handler(content_types=['text'])
def weather(message):
    city = message.text
    url = f'https://api.openweathermap.org/data/2.5/weather?q={city}&units=metric&lang=ru&appid={OPENWEATHERMAP_API_KEY}'
    
    try:
        response = requests.get(url, timeout=10)
        weather_data = response.json()
        
        cod = str(weather_data.get('cod'))
        logger.debug(f'API response code: {cod}, status: {response.status_code}')
        
        if cod == '401':
            logger.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ API OpenWeatherMap')
            bot.send_message(message.from_user.id, '‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.')
            return
        
        if cod == '404':
            logger.info(f'–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω: {city}')
            bot.send_message(message.from_user.id, f'‚ùå –ì–æ—Ä–æ–¥ "{city}" –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
            return
        
        if cod != '200':
            logger.warning(f'–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç API: {cod} - {weather_data.get("message")}')
            bot.send_message(message.from_user.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
            return
        
        temperature = round(weather_data['main']['temp'])
        temperature_feels = round(weather_data['main']['feels_like'])
        w_now = f'–°–µ–π—á–∞—Å –≤ –≥–æ—Ä–æ–¥–µ {city} {temperature} ¬∞C'
        w_feels = f'–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {temperature_feels} ¬∞C'
        
        logger.info(f'–ü–æ–≥–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–ª—è –≥–æ—Ä–æ–¥–∞: {city}')
        bot.send_message(message.from_user.id, w_now)
        bot.send_message(message.from_user.id, w_feels)
        
    except requests.exceptions.Timeout:
        logger.error(f'–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –≥–æ—Ä–æ–¥–∞: {city}')
        bot.send_message(message.from_user.id, '‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
    except requests.exceptions.RequestException as e:
        logger.error(f'–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–≥–æ–¥—ã: {e}')
        bot.send_message(message.from_user.id, '‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.')
    except Exception as e:
        logger.exception(f'–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã: {e}')
        bot.send_message(message.from_user.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')


if __name__ == '__main__':
    import time
    keep_alive()
    logger.info('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!')
    while True:
        try:
            bot.infinity_polling()
        except Exception as e:
            logger.error(f'‚ùå –û—à–∏–±–∫–∞: {e}')
            logger.info('üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...')
            time.sleep(5)
